Student Name #1: Anni Wang 
Student ugrad login #1: v8v8 

Student Name #2: Marinah Zhao 
Student ugrad login #2: d7c9

We acknowledgment that we understand and have followed the course's collaboration policy
(http://www.ugrad.cs.ubc.ca/~cs221/current/syllabus.shtml#conduct):

Names: Anni Wang, Marinah Zhao
Date: September 24, 2015

TODO: submit using: make handin-milestone1
(Run that from one of the UBC ugrad computers, after you have transfered
your files there and tested to make sure they work correctly on our systems.)

----------------------------------------------------------------------

Questions:

For the explanations, generally a sentence or two should be enough.
Type your answers directly in this file.

0.  Compile the program (using make).  What puzzle does it solve?

-> It solves the Wolf/Goat/Cabbage puzzle.



1.  Edit solve.cpp to solve the MazeRunner problem, and set the code
to declare activeStates as ArrayStack or LinkedListStack.  (You should
only comment out one line and uncomment one line to do that.)
Do you see why it's called depth-first search (DFS)?
(If not, you can increase the delay in the usleep call to slow down
the animation.)
How many steps long was the solution it found?
Does it make a difference whether you use ArrayStack or LinkedListStack?

-> using arraystack, the solution took 59 steps
-> using the linkedliststack, the solution took 59 steps
-> in terms of number of steps, no, they both took 59 steps
-> in terms of the solution, the route is the same for both
-> in terms of run time, there might be other variables affecting run time, 	but they appear to have the same excution time on the same computer
	//for the arraystack:
	real - 0m24.818s
	user - 0m0.074s
	sys - 0m0.012s
					//for the linkedliststack:
					real - 0m24.832s
					user - 0m0.069s
					sys - 0m0.012s



2.  Edit solve.cpp to solve the empty Sudoku board.
What solution do you get?
-> here is the solution when we ran it multiple times:

STEP 82:
 9 8 7 6 5 4 3 2 1
 6 5 4 3 2 1 9 8 7
 3 2 1 9 8 7 6 5 4
 8 9 6 7 4 5 2 1 3
 7 4 5 2 1 3 8 9 6
 2 1 3 8 9 6 7 4 5
 5 7 9 4 6 8 1 3 2
 4 6 8 1 3 2 5 7 9
 1 3 2 5 7 9 4 6 8


3.  Next, edit solve.cpp to switch to peg solitaire game (the class
is called Marble).  Run it to completion with the usleep delay set to 10000.
How long does that take on your computer?  Now, comment out the
usleep command as well as the two lines before it.  Now how long does it
take to solve?  (This is why we'll comment these out when we solve
harder puzzles.)

-> for the English peg solitaire, with usleep(10,000) the time is 
	real - 0m11.129s
	user - 0m0.156s
	sys - 0m0.046s
-> for the English peg solitaire without usleep delay
	real - 0m0.170s
	user - 0m0.152s
	sys - 0m0.002s



4.  Edit solve.cpp to switch to the 3x3 slider puzzle.  Make sure
the usleep and print statements in solvePuzzle are still commented out.
Try solving the 3x3 slider puzzle.  What happens?  Why?
-> solve runs for a really long time for both the array and linkedlist 			implementation of stack. (We terminated the program before it 				could reach a solution because it took too long.)
-> This happens because in the slider puzzle, we are using recursion to 		search for the solution:
	
    SliderPuzzle* temp = new SliderPuzzle(*this);

    (ie. We are creating a new sliderpuzzle with the current slider puzzle.)Because of the recursion, the algorithm may take a long time in order solve a more complicated puzzle that requires more recursions (more paths to explore).





----------------------------------------------------------------------
